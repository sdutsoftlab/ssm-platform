<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 开启注解扫描，因为spring和springMVC是父子容器，但是它们有各自独立性，这里排除Controller层，
如果不排除，都全部扫描，就可能会出现Controller的方法无法拦截、Bean被多次加载等问题；-->
<!--    注意，controller层的扫描已经在springMVC中进行了，这里不需要重复进行扫描-->
    <context:component-scan base-package="com.tommy">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
    </context:component-scan>

    <!--spring整合mybatis-->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>

    <!--配置连接池-->
    <bean id="datSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.userName}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="initialPoolSize" value="${jdbc.c3p0.initialPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.c3p0.maxPoolSize}"/>
        <property name="minPoolSize" value="${jdbc.c3p0.minPoolSize}"/>
        <property name="maxIdleTime" value="${jdbc.c3p0.maxIdleTime}"/>
    </bean>

    <!--配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="datSource" />
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations" value="classpath:com/tommy/dao/*.xml"/>
    </bean>

    <!--配置接口所在的包-->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.tommy.dao"/>
    </bean>
<!--    创建dao实体类-->

    <!--配置spring框架声明式事务管理-->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datSource"/>
    </bean>

<!--下面是事务管理器的配置-->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--配置事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--事务的属性-->
        <tx:attributes>
            <!--SUPPORTS代表支持当前事务，如果当前没有事务，就以非事务方式执行。-->
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <!--DEFAULT代表以数据库的隔离级别-->
            <tx:method name="*" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <!--配置Aop增强-->
    <aop:config>
        <!--配置切入点表达式-->
        <!--* *..*.*(..)      修饰符（可省略）   返回类型  包.包....包.类.方法.(参数)-->
        <aop:pointcut id="pt" expression="execution(* com.tommy.service.impl.*.*(..))"/>
        <!--建立事务与切入点之间的关系-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
    </aop:config>



</beans>